(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{710:function(t,e,s){"use strict";s.r(e);var i=s(4),a=Object(i.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#参考链接"}},[t._v("参考链接")])]),s("li",[s("a",{attrs:{href:"#常用命令解释"}},[t._v("常用命令解释")])]),s("li",[s("a",{attrs:{href:"#将原分支的最新代码合并到当前分支-当前有未提交代码"}},[t._v("将原分支的最新代码合并到当前分支（当前有未提交代码）")])]),s("li",[s("a",{attrs:{href:"#问题记录"}},[t._v("问题记录")]),s("ul",[s("li",[s("a",{attrs:{href:"#git-push-报错-client-loop-send-disconnect-connection-reset-by-peers"}},[t._v("git push 报错：client_loop: send disconnect: Connection reset by peers")])])])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"参考链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("git cherry-pick 教程"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"常用命令解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令解释"}},[t._v("#")]),t._v(" 常用命令解释")]),t._v(" "),s("ul",[s("li",[t._v("git stash 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到 Git 栈中。")]),t._v(" "),s("li",[t._v("git stash save {stashName} 对暂存stash命名")]),t._v(" "),s("li",[t._v("git stash pop: 从 Git 栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个 Stash 的内容，所以用栈来管理，pop 会从最近的一个 stash 中读取内容并恢复。")]),t._v(" "),s("li",[t._v("git stash list: 显示 Git 栈内的所有备份，可以利用这个列表来决定从那个地方恢复。")]),t._v(" "),s("li",[t._v("git stash clear: 清空 Git 栈。此时使用 gitg 等图形化工具会发现，原来 stash 的哪些节点都消失了。")]),t._v(" "),s("li",[t._v("git stash apply stash@{X} : 取出相应的暂存")]),t._v(" "),s("li",[t._v("git stash drop stash@{X} : 将记录列表中取出的对应暂存记录删除")]),t._v(" "),s("li",[t._v("git branch: 查看本地分支")]),t._v(" "),s("li",[t._v("git branch -r 查看远程分支")]),t._v(" "),s("li",[t._v("git branch -a 查看所有分支")]),t._v(" "),s("li",[t._v("git checkout [master] 切换分支")]),t._v(" "),s("li",[t._v("git checkout -b [iss53] 新建并切换分支")]),t._v(" "),s("li",[t._v("git branch [iss53] 新建分支")]),t._v(" "),s("li",[t._v("git branch -d [branchname] 删除分支")]),t._v(" "),s("li",[t._v("git push origin --delete [branchname] 删除远程分支")]),t._v(" "),s("li",[t._v("git fetch -p 清理本地无效分支（远程已删除）")]),t._v(" "),s("li",[t._v("git reset --hard origin/test 指针重置到另一个分支，用于分支覆盖")]),t._v(" "),s("li",[t._v("git cherry-pick 转移提交，在目标分支下执行\n"),s("ul",[s("li",[t._v("git cherry-pick feature 转移 feature 分支的最新一次 commit")]),t._v(" "),s("li",[t._v("git cherry-pick "),s("code",[t._v("<HashA>")]),t._v(" "),s("code",[t._v("<HashB>")]),t._v(" 转移多个 commit")]),t._v(" "),s("li",[t._v("git cherry-pick A..B commitA 到 commitB，不包括 A")]),t._v(" "),s("li",[t._v("git cherry-pick A^..B commitA 到 commitB，包括 A")])])]),t._v(" "),s("li",[t._v("git clone "),s("code",[t._v("<Repo>")]),t._v(" "),s("code",[t._v("<DestinationDirectory>")]),t._v(" clone时重命名文件夹")]),t._v(" "),s("li",[t._v("git symbolic-ref --short HEAD 获取当前分支名")]),t._v(" "),s("li",[t._v("git rev-parse HEAD 获取当前commit")]),t._v(" "),s("li",[t._v("git rev-parse --short HEAD  获取当前分支名")])]),t._v(" "),s("h2",{attrs:{id:"将原分支的最新代码合并到当前分支-当前有未提交代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将原分支的最新代码合并到当前分支-当前有未提交代码"}},[t._v("#")]),t._v(" 将原分支的最新代码合并到当前分支（当前有未提交代码）")]),t._v(" "),s("ol",[s("li",[t._v("git status")]),t._v(" "),s("li",[t._v("git stash")]),t._v(" "),s("li",[t._v("git rebase origin/XXX（原分支）")]),t._v(" "),s("li",[t._v("git push origin XXX（当前分支） -f")]),t._v(" "),s("li",[t._v("git stash pop")])]),t._v(" "),s("h2",{attrs:{id:"问题记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题记录"}},[t._v("#")]),t._v(" 问题记录")]),t._v(" "),s("h3",{attrs:{id:"git-push-报错-client-loop-send-disconnect-connection-reset-by-peers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-push-报错-client-loop-send-disconnect-connection-reset-by-peers"}},[t._v("#")]),t._v(" git push 报错：client_loop: send disconnect: Connection reset by peers")]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("client_loop: send disconnect: Connection reset by peers\nfatal: sha1 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<stdout>'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),t._v(" error: Broken pipeB/s\nfatal: the remote end hung up unexpectedly\nfatal: the remote end hung up unexpectedly\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("http.postBuffer默认上限为1M，将上限改大就行\n"),s("code",[t._v("git config --global http.postBuffer 157286400")]),t._v("\n用"),s("code",[t._v("git config –list")]),t._v("查看是否生效。")])])}),[],!1,null,null,null);e.default=a.exports}}]);